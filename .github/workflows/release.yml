name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: gmail-mcp-extension/mcp-server/package-lock.json

      - name: Install dependencies
        run: |
          cd gmail-mcp-extension/mcp-server
          npm ci

      - name: Run tests
        run: |
          cd gmail-mcp-extension/mcp-server
          npm test

      - name: Create extension package
        run: |
          mkdir -p release
          cd gmail-mcp-extension
          zip -r ../release/gmail-mcp-extension-${{ github.ref_name }}.zip extension/ mcp-server/ *.md *.sh LICENSE
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get the tag name without 'v' prefix
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG="Initial release"
          else
            CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD | grep -v "^- Merge" || echo "- Bug fixes and improvements")
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in $TAG_NAME" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Gmail MCP Extension ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/gmail-mcp-extension-${{ github.ref_name }}.zip
          asset_name: gmail-mcp-extension-${{ github.ref_name }}.zip
          asset_content_type: application/zip